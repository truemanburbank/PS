#include <string>
#include <vector>

using namespace std;

// 가로의 길이 n은 60,000이하의 자연수 
// 경우의 수가 많아 질 수 있으므로, 경우의 수를 1,000,000,007으로 나눈 나머지를 return

// n = k일때 만들 수 있는 타일 조합은
// k-1일때 만들 수 있는 타일 목록에서 세로 타일을 하나 더한 것 
// 마찬가지로 k-2일때 만들 수 있는 타일 목록에 가로 타일을 하나 더한 것.
// 따라서 n = k 일 때 만들 수 있는 타일 조합의 경우의 수는 (k-1일때 경우의 수) + (k-2일때 경우의 수)이다.

// n = 1일때, 경우의 수는 1 (세)
// n = 2일때, 경우의 수는 2 (세세, 가)
// n = 3일때, 경우의 수는 3 (세세세), (가세), (세가)
// n = 4일때, 경우의 수는 5 (세세세세), (가세세), (세가세), (세세가), (가가)

int solution(int n) 
{
    // n = k 일 때, 경우의 수를 저장하고 있음.
    vector<int> dp(n + 1, 0);
    dp[1] = 1;
    dp[2] = 2;

    for (int i = 3; i <= n; i++)
    {
        // 큰 수의 덧셈을 하기 위해 모듈러 연산 분배 법칙 사용
        dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007;
    }

    return dp[n];
}

int main()
{
    solution(4);
}